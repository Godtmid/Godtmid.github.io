<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Godtmid</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://godtmid.github.io/"/>
  <updated>2020-06-26T16:14:56.501Z</updated>
  <id>https://godtmid.github.io/</id>
  
  <author>
    <name>天蓝蓝</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux shell</title>
    <link href="https://godtmid.github.io/2020/06/26/linux-shell/"/>
    <id>https://godtmid.github.io/2020/06/26/linux-shell/</id>
    <published>2020-06-26T12:55:37.000Z</published>
    <updated>2020-06-26T16:14:56.501Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="知识小点"><a href="#知识小点" class="headerlink" title="知识小点"></a>知识小点</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$&#123;#变量&#125;获取变量长度</span><br><span class="line">$&#123;#变量:1:4&#125;提取字符串</span><br><span class="line"> &#96;expr index $&#123;yw&#125; d&#96;查找d在字符串yw中的下标</span><br><span class="line">数组名&#x3D;(值1 值1 值1)数组值加空格，长度不限制 </span><br><span class="line">$&#123;数组名&#125;默认输出第一个元素</span><br><span class="line">$(数组名[@])$(数组名[*])输出全部元素</span><br><span class="line">find . -name &quot;*.sh&quot; | xargs grep &quot;p2&quot;查找当前目录下所有包含&quot;p2&quot;关键字的sh后缀文件</span><br><span class="line">echo m2 m3 m4 |xargs -n 1 cp -v p1.sh批量复制一个文件到多个文件夹</span><br><span class="line">-n 1 - 告诉 xargs 命令每个命令行最多使用一个参数，并发送到 cp 命令中。</span><br><span class="line">cp – 用于复制文件。</span><br><span class="line">-v – 启用详细模式来显示更多复制细节。</span><br><span class="line">((i&lt;5))用双括号可以直接写表达式，不用管linux的运算符</span><br><span class="line">&quot;sh -c &quot; 命令，它可以让 bash 将一个字串作为完整的命令来执行，这样就可以将 sudo 的影响范围扩展到整条命令。具体用法如下：</span><br><span class="line">$ sudo sh -c &#39;echo &quot;又一行信息&quot; &gt;&gt; test.asc&#39;</span><br><span class="line">dirname $0 获取当前脚本目录</span><br></pre></td></tr></table></figure><a id="more"></a><p>命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">awk知识点：</span><br><span class="line">awk &#39;&#123;match($1,&#x2F;[0-9]+&#x2F;,a)&#125;&#123;print($2 , a[0])&#125;&#39;获取匹配的第一，第二列，并将第一列正则匹配传到数组，打印出来</span><br><span class="line">awk &#39;&#123;FS&#x3D;&quot;s&#x3D;&quot;&#125;&#123;print($1)&#125;&#39;获取以字符串&quot;s&#x3D;&quot;分割后的第一列</span><br><span class="line">rz和sz：中小文件上传下载命令：</span><br><span class="line">rz：文件上传，通常使用命令</span><br><span class="line">rz -be#option说明，b：二进制，e：跳过文件中的控制字符</span><br><span class="line"></span><br><span class="line">sz：文件下载，通常使用命令</span><br><span class="line">sz wujn.txt wujn  #多文件下载</span><br></pre></td></tr></table></figure><h2 id="linux-shell的多样性"><a href="#linux-shell的多样性" class="headerlink" title="linux shell的多样性"></a>linux shell的多样性</h2><p>Bourne shell：最初的shell，即sh。处理与用户的交互方面差<br>Bourne Again shell：Bourne shell的扩展，即bash,在sh的基础上添加了许多新特性，提供如命令补全、命令编辑和命令历史表等功能，有灵活和强大的编程接口，同时又有很友好的用户界面<br>注：若脚本第一行为“#!/bin/bash”，使用sh调用脚本则即调用bash去解释脚本（Ubuntu除外）<br>Dash：由于bash太复杂，为了获得更快的脚本执行速度，Dash应运而生。<br>注：    若脚本第一行为 “#!/bin/sh”，我们使用命令：”sh script_name.sh“时是调用的 dash 解释脚本<br>Ubuntu默认sh链接dash,<br>root@ubuntu:/myshell# ls -l /bin/sh /bin/bash<br>-rwxr-xr-x 1 root root 1037528 Jul 13 03:26 /bin/bash<br>lrwxrwxrwx 1 root root       4 Aug 31 20:12 /bin/sh -&gt; dash</p><p>由于在 bash 下可以正常运行的一些 sh 在 dash 下不能使用，造成了一些麻烦。<br>故重新配置dash：<br>sudo dpkg-reconfigure dash #选择 “no”，即不使用 dash</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;知识小点&quot;&gt;&lt;a href=&quot;#知识小点&quot; class=&quot;headerlink&quot; title=&quot;知识小点&quot;&gt;&lt;/a&gt;知识小点&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;#变量&amp;#125;		获取变量长度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;#变量:1:4&amp;#125;		提取字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &amp;#96;expr index $&amp;#123;yw&amp;#125; d&amp;#96;	查找d在字符串yw中的下标&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;数组名&amp;#x3D;(值1 值1 值1)	数组值加空格，长度不限制 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$&amp;#123;数组名&amp;#125;				默认输出第一个元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$(数组名[@])	$(数组名[*])		输出全部元素&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;find . -name &amp;quot;*.sh&amp;quot; | xargs grep &amp;quot;p2&amp;quot;	查找当前目录下所有包含&amp;quot;p2&amp;quot;关键字的sh后缀文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;echo m2 m3 m4 |xargs -n 1 cp -v p1.sh		批量复制一个文件到多个文件夹&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-n 1 - 告诉 xargs 命令每个命令行最多使用一个参数，并发送到 cp 命令中。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cp – 用于复制文件。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-v – 启用详细模式来显示更多复制细节。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;((i&amp;lt;5))			用双括号可以直接写表达式，不用管linux的运算符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;quot;sh -c &amp;quot; 命令，它可以让 bash 将一个字串作为完整的命令来执行，这样就可以将 sudo 的影响范围扩展到整条命令。具体用法如下：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo sh -c &amp;#39;echo &amp;quot;又一行信息&amp;quot; &amp;gt;&amp;gt; test.asc&amp;#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dirname $0 获取当前脚本目录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://Godtmid.github.io/categories/Linux/"/>
    
    
      <category term="shell" scheme="https://Godtmid.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>springboot注解</title>
    <link href="https://godtmid.github.io/2020/06/20/springboot/"/>
    <id>https://godtmid.github.io/2020/06/20/springboot/</id>
    <published>2020-06-20T06:20:17.000Z</published>
    <updated>2020-06-27T02:46:39.056Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Springboot注解笔记"><a href="#Springboot注解笔记" class="headerlink" title="Springboot注解笔记"></a><strong>Springboot注解笔记</strong></h1><h2 id="springboot常用注解"><a href="#springboot常用注解" class="headerlink" title="springboot常用注解"></a><strong>springboot常用注解</strong></h2><p><strong>@Primary或@Qualifier</strong></p><p><strong>问题：</strong></p><p>当一个接口有 2 个不同实现时，使用 @Autowired 注解时会报 org.springframework.beans.factory.NoUniqueBeanDefinitionException 异常信息</p><p><strong>解释与应用：</strong></p><p>@Qualifier:使用 Qualifier 注解，选择一个对象的名称，通常比较常用</p><p>@Primary:Primary 可以理解为默认优先选择，同时不可以同时设置多个，内部实质是设置 BeanDefinition 的 primary 属性</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;metalSinger&quot;) &#x2F;&#x2F; 加注解，让spring识别</span><br><span class="line">public class MetalSinger implements Singer&#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String sing(String lyrics) &#123;</span><br><span class="line">        return &quot;I am singing with DIO voice: &quot;+lyrics;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@Primary</span><br><span class="line">@Component(&quot;operaSinger&quot;)</span><br><span class="line">public class OperaSinger implements Singer &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String sing(String lyrics) &#123;</span><br><span class="line">        return &quot;I am singing in Bocelli voice: &quot;+lyrics;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">public interface Singer &#123;</span><br><span class="line">    String sing(String lyrics);</span><br><span class="line">&#125;</span><br><span class="line">@Component</span><br><span class="line">public class SingerService &#123;</span><br><span class="line">    private static final Logger logger &#x3D; LoggerFactory.getLogger(SingerService.class);</span><br><span class="line">    @Autowired</span><br><span class="line">    @Qualifier</span><br><span class="line">    private Singer singer;</span><br><span class="line">    public String sing()&#123;</span><br><span class="line">        return singer.sing(&quot;song lyrics&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        ApplicationContext context &#x3D; new AnnotationConfigApplicationContext(&quot;context.annotation.primary&quot;);</span><br><span class="line">        SingerService singerService &#x3D; context.getBean(SingerService.class);</span><br><span class="line">        System.out.println(singerService.sing());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Import</strong>：用来导入其他配置类。 </p><p><strong>@ImportResource</strong>：用来加载xml配置文件。 </p><p><strong>@Autowired</strong>：自动导入依赖的bean </p><p><strong>@Service</strong>：一般用于修饰service层的组件 </p><p><strong>@Repository</strong>：使用@Repository注解可以确保DAO或者repositories提供异常转译， 这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。 </p><p><strong>@Bean</strong>：用@Bean标注方法等价于XML中配置的bean。 </p><p><strong>@Value</strong>：注入Spring boot application.properties配置的属性的值。示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Value(value &#x3D; “#&#123;message&#125;”)</span><br><span class="line">private String message;</span><br></pre></td></tr></table></figure><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理"></a><strong>全局异常处理</strong></h2><p><strong>@ControllerAdvice、@RestControllerAdvice</strong>：包含@Component。可以被扫描到。统一处理异常。 实现    <em>ResponseBodyAdvice&lt;Object&gt;</em>接口实现统一分装返回。 </p><p><strong>@ExceptionHandler（Exception.class）</strong>：用在方法上面表示遇到这个异常就执行以下方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Springboot注解笔记&quot;&gt;&lt;a href=&quot;#Springboot注解笔记&quot; class=&quot;headerlink&quot; title=&quot;Springboot注解笔记&quot;&gt;&lt;/a&gt;&lt;strong&gt;Springboot注解笔记&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;springboot常用注解&quot;&gt;&lt;a href=&quot;#springboot常用注解&quot; class=&quot;headerlink&quot; title=&quot;springboot常用注解&quot;&gt;&lt;/a&gt;&lt;strong&gt;springboot常用注解&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;@Primary或@Qualifier&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当一个接口有 2 个不同实现时，使用 @Autowired 注解时会报 org.springframework.beans.factory.NoUniqueBeanDefinitionException 异常信息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解释与应用：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;@Qualifier:使用 Qualifier 注解，选择一个对象的名称，通常比较常用&lt;/p&gt;
&lt;p&gt;@Primary:Primary 可以理解为默认优先选择，同时不可以同时设置多个，内部实质是设置 BeanDefinition 的 primary 属性&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://Godtmid.github.io/categories/Java/"/>
    
      <category term="springboot" scheme="https://Godtmid.github.io/categories/Java/springboot/"/>
    
    
      <category term="springboot注解" scheme="https://Godtmid.github.io/tags/springboot%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
</feed>
